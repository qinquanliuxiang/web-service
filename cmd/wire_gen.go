// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"context"
	"github.com/gin-gonic/gin"
	"web-service/base/app"
	"web-service/base/conf"
	"web-service/base/data"
	"web-service/base/middleware"
	"web-service/base/server"
	"web-service/controller"
	"web-service/pkg/permissions"
	"web-service/repo"
	"web-service/router"
	"web-service/service"
)

// Injectors from wire.go:

func InitApplication(ctx context.Context, cabinModelFile string) (*app.Application, func(), error) {
	db, cleanup, err := data.NewDB()
	if err != nil {
		return nil, nil, err
	}
	userRepo := repo.NewUserRepo(db)
	generalRoleRepo := repo.NewRoleRepo(db)
	client := data.CreateRDB(ctx)
	redis, cleanup2 := data.NewRedis(client)
	enforcer, err := permissions.InitCasbin(cabinModelFile)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	generalAuthorizRepo := permissions.NewGeneralAuthorizRepo(enforcer)
	userService := service.NewUserService(userRepo, generalRoleRepo, redis, generalAuthorizRepo)
	userController := controller.NewUserController(userService)
	policyRepo := repo.NewPolicyRepo(db)
	roleAssociationRepo := repo.NewRoleAssociationRepo(db)
	roleService := service.NewRoleService(generalRoleRepo, policyRepo, roleAssociationRepo, generalAuthorizRepo)
	roleController := controller.NewRoleController(roleService)
	policyService := service.NewPolicyService(policyRepo)
	policyController := controller.NewPolicyController(policyService)
	apiRoute := router.NewApiRoute(userController, roleController, policyController)
	authoriz := permissions.NewAuthoriz(enforcer)
	getUserRepo := repo.NewGetUserRepo(userRepo)
	authorizationMiddleware := middleware.NewAuthorization(redis, authoriz, getUserRepo)
	engine := server.NewHttpServer(apiRoute, authorizationMiddleware)
	application := newApplication(engine)
	return application, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

const (
	Version = "1.0.0"
)

func newApplication(e *gin.Engine) *app.Application {
	return app.NewApp(app.WithName(conf.GetProjectName()), app.WithVersion(Version), app.WithServer(server.NewServer(e)))
}
